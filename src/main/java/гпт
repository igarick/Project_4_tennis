üß† –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è

–ú–µ—Ç–æ–¥ update() –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–≥–æ 4 —à–∞–≥–∞, –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ:

1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å tie-break
2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å point victory / deuce / advantage
3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å game victory
4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å set victory / match victory

‚úÖ –ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
private void update(Score player, Score opponent, MatchScoreModel match) {

    // 1Ô∏è‚É£ Tie-break: –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —Ç–∞–π-–±—Ä–µ–π–∫
    if (isTieBreak(player, opponent)) {
        isTieBreakGlobal = true;
        if (isTieBreakVictory(player.getTieBreakPoints(), opponent.getTieBreakPoints())) {
            resetTieBreakScores(player, opponent);
            incrementGames(player);
        }
        return;
    }

    // 2Ô∏è‚É£ Point logic: –≤—ã–∏–≥—Ä–∞–Ω–æ –æ—á–∫–æ –∏–ª–∏ deuce
    PointScoreEnum p = player.getPoints();
    PointScoreEnum o = opponent.getPoints();

    // Deuce
    if (p == FORTY && o == FORTY) {
        player.setPoints(ADVANTAGE);
        return;
    }

    // –°–±—Ä–æ—Å –∏–∑ advantage –æ–±—Ä–∞—Ç–Ω–æ –≤ 40 –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ
    if (p == FORTY && o == ADVANTAGE) {
        opponent.setPoints(FORTY);
        return;
    }

    // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –≥–µ–π–º
    if (p == ADVANTAGE) {
        player.setPoints(PointScoreEnum.LOVE);
        opponent.setPoints(PointScoreEnum.LOVE);
        incrementGames(player);
        checkSetAndMatchVictory(player, opponent);
        return;
    }

    // 3Ô∏è‚É£ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–±—Ä–∞–ª WIN (—É —Ç–µ–±—è –≤ enum –µ—Å—Ç—å WIN)
    if (p == PointScoreEnum.WIN) {
        player.setPoints(PointScoreEnum.LOVE);
        opponent.setPoints(PointScoreEnum.LOVE);
        incrementGames(player);
        checkSetAndMatchVictory(player, opponent);
        return;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏
    addMatchPoint(player);
}

üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
private void incrementGames(Score player) {
    player.setGames(player.getGames() + 1);
}

private void resetTieBreakScores(Score p1, Score p2) {
    p1.setTieBreakPoints(0);
    p2.setTieBreakPoints(0);
}

private void checkSetAndMatchVictory(Score player, Score opponent) {
    int pg = player.getGames();
    int og = opponent.getGames();

    // –ø–æ–±–µ–¥–∞ –≤ —Å–µ—Ç–µ
    if (isGameVictory(pg, og)) {
        player.setGames(0);
        opponent.setGames(0);
        player.setSets(player.getSets() + 1);
    }

    // –ø–æ–±–µ–¥–∞ –≤ –º–∞—Ç—á–µ (–¥–æ 2 —Å–µ—Ç–æ–≤)
    if (player.getSets() == 2) {
        System.out.println("üèÜ Player wins the match!");
    }
}

üß© –ß—Ç–æ —É–ª—É—á—à–∏–ª–æ—Å—å
–ë—ã–ª–æ	–°—Ç–∞–ª–æ
–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞	–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ª–æ–≥–∏–∫–∏
–õ–æ–≥–∏–∫–∞ –æ—á–∫–æ–≤, –≥–µ–π–º–æ–≤, —Å–µ—Ç–æ–≤ —Å–º–µ—à–∞–Ω–∞	–ß—ë—Ç–∫–∏–µ —É—Ä–æ–≤–Ω–∏: point ‚Üí game ‚Üí set
–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—É—Ç–∞–Ω–∏—Ü–∞ —Å advantage/deuce	–°—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ç–µ–Ω–Ω–∏—Å–∞
update() –¥–µ–ª–∞–ª –≤—Å—ë –ø–æ–¥—Ä—è–¥	–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π
–ù–µ–Ω—É–∂–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏	–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å isTieBreakGlobal –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ match
üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:

—Ñ–ª–∞–≥ boolean finished –≤ MatchScoreModel, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å –∫–æ–Ω–µ—Ü –º–∞—Ç—á–∞;

–º–µ—Ç–æ–¥ getCurrentScoreString() ‚Äî —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å—á—ë—Ç –≤ JSP;

enum MatchStatus { IN_PROGRESS, FINISHED }.